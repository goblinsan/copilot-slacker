name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Extract Tag
        id: meta
        run: echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install deps
        run: npm ci
      - name: Build dist
        run: npm run build:dist
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/approval-service
          tags: |
            type=raw,value=${{ steps.meta.outputs.tag }}
            type=raw,value=latest
      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Capture Image Digest
        id: image_digest
        run: |
          echo "digest=${{ steps.docker_meta.outputs.tags }}" >/dev/null # placeholder
          DIGEST=$(docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/approval-service:${{ steps.meta.outputs.tag }} | awk '/Digest/ {print $2; exit}')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
      - name: Generate SBOM (CycloneDX)
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository_owner }}/approval-service:${{ steps.meta.outputs.tag }}
          format: cyclonedx-json
          artifact-name: sbom-${{ steps.meta.outputs.tag }}.cdx.json
      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ steps.meta.outputs.tag }}
          path: sbom-${{ steps.meta.outputs.tag }}.cdx.json
      - name: Generate SLSA Provenance (container)
        uses: slsa-framework/slsa-github-generator/actions/container@v2
        with:
          image: ghcr.io/${{ github.repository_owner }}/approval-service:${{ steps.meta.outputs.tag }}
          digest: ${{ steps.image_digest.outputs.digest }}
          provenance-name: provenance-${{ steps.meta.outputs.tag }}.intoto.jsonl
      - name: Upload Provenance Artifact
        uses: actions/upload-artifact@v4
        with:
          name: provenance-${{ steps.meta.outputs.tag }}
          path: provenance-${{ steps.meta.outputs.tag }}.intoto.jsonl
      - name: Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/approval-service:${{ steps.meta.outputs.tag }}
          format: table
          ignore-unfixed: true
          vuln-type: 'os,library'
          exit-code: '1'
        continue-on-error: true
      - name: Output Image Reference
        run: echo "Published ghcr.io/${{ github.repository_owner }}/approval-service:${{ steps.meta.outputs.tag }}"